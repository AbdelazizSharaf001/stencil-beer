/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import '@stencil/core';

declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;

    forceUpdate(): void;
  }

  interface HTMLAttributes {}
}

import 'ionicons';
import '@ionic/core';
import '@stencil/router';

import {
  Bar,
  Beer,
} from './global/interfaces';
import {
  RouterHistory,
} from '@stencil/router';
import {
  EventEmitter,
} from '@stencil/core';

declare global {
  interface HTMLAmRatingElement extends HTMLStencilElement {
    /**
     * Determines if half ratings are allowed
     */
    'allowHalfRatings': boolean;
    /**
     * The color to fill the rating with when it's outwith the max
     */
    'colorOff': string;
    /**
     * The color to fill the rating with when it's within the max
     */
    'colorOn': string;
    /**
     * The color to fill the rating with when it's outwith the max
     */
    'colorOutline': string;
    /**
     * The direction of the shading. Valid settings are 'ltr' (left to right) and 'ttb' (top to bottom)
     */
    'direction': string;
    /**
     * Determines if the user can set a rating
     */
    'interactive': boolean;
    /**
     * The maximum rating possible
     */
    'maxRating': number;
    /**
     * The minimum rating possible
     */
    'minRating': number;
    /**
     * The rating
     */
    'rating': number;
    /**
     * The rating identifier
     */
    'reference': string;
    /**
     * This is a star!
     */
    'svgPoints': string;
    /**
     * The view box for the SVG
     */
    'svgViewBox': string;
  }
  var HTMLAmRatingElement: {
    prototype: HTMLAmRatingElement;
    new (): HTMLAmRatingElement;
  };
  interface HTMLElementTagNameMap {
    'am-rating': HTMLAmRatingElement;
  }
  interface ElementTagNameMap {
    'am-rating': HTMLAmRatingElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'am-rating': JSXElements.AmRatingAttributes;
    }
  }
  namespace JSXElements {
    export interface AmRatingAttributes extends HTMLAttributes {
      /**
       * Determines if half ratings are allowed
       */
      'allowHalfRatings'?: boolean;
      /**
       * The color to fill the rating with when it's outwith the max
       */
      'colorOff'?: string;
      /**
       * The color to fill the rating with when it's within the max
       */
      'colorOn'?: string;
      /**
       * The color to fill the rating with when it's outwith the max
       */
      'colorOutline'?: string;
      /**
       * The direction of the shading. Valid settings are 'ltr' (left to right) and 'ttb' (top to bottom)
       */
      'direction'?: string;
      /**
       * Determines if the user can set a rating
       */
      'interactive'?: boolean;
      /**
       * The maximum rating possible
       */
      'maxRating'?: number;
      /**
       * The minimum rating possible
       */
      'minRating'?: number;
      /**
       * Event fired when the rating is updated by user input
       */
      'onRatingUpdated'?: (event: CustomEvent) => void;
      /**
       * The rating
       */
      'rating'?: number;
      /**
       * The rating identifier
       */
      'reference'?: string;
      /**
       * This is a star!
       */
      'svgPoints'?: string;
      /**
       * The view box for the SVG
       */
      'svgViewBox'?: string;
    }
  }
}


declare global {
  interface HTMLAuthPageElement extends HTMLStencilElement {

  }
  var HTMLAuthPageElement: {
    prototype: HTMLAuthPageElement;
    new (): HTMLAuthPageElement;
  };
  interface HTMLElementTagNameMap {
    'auth-page': HTMLAuthPageElement;
  }
  interface ElementTagNameMap {
    'auth-page': HTMLAuthPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'auth-page': JSXElements.AuthPageAttributes;
    }
  }
  namespace JSXElements {
    export interface AuthPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLBarDirectionsElement extends HTMLStencilElement {
    'address': string;
    'dest': string;
  }
  var HTMLBarDirectionsElement: {
    prototype: HTMLBarDirectionsElement;
    new (): HTMLBarDirectionsElement;
  };
  interface HTMLElementTagNameMap {
    'bar-directions': HTMLBarDirectionsElement;
  }
  interface ElementTagNameMap {
    'bar-directions': HTMLBarDirectionsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'bar-directions': JSXElements.BarDirectionsAttributes;
    }
  }
  namespace JSXElements {
    export interface BarDirectionsAttributes extends HTMLAttributes {
      'address'?: string;
      'dest'?: string;
    }
  }
}


declare global {
  interface HTMLBarListElement extends HTMLStencilElement {
    'bars': Array<Bar>;
  }
  var HTMLBarListElement: {
    prototype: HTMLBarListElement;
    new (): HTMLBarListElement;
  };
  interface HTMLElementTagNameMap {
    'bar-list': HTMLBarListElement;
  }
  interface ElementTagNameMap {
    'bar-list': HTMLBarListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'bar-list': JSXElements.BarListAttributes;
    }
  }
  namespace JSXElements {
    export interface BarListAttributes extends HTMLAttributes {
      'bars'?: Array<Bar>;
    }
  }
}


declare global {
  interface HTMLBarPageElement extends HTMLStencilElement {

  }
  var HTMLBarPageElement: {
    prototype: HTMLBarPageElement;
    new (): HTMLBarPageElement;
  };
  interface HTMLElementTagNameMap {
    'bar-page': HTMLBarPageElement;
  }
  interface ElementTagNameMap {
    'bar-page': HTMLBarPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'bar-page': JSXElements.BarPageAttributes;
    }
  }
  namespace JSXElements {
    export interface BarPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLBeerDetailElement extends HTMLStencilElement {
    'beerId': string;
  }
  var HTMLBeerDetailElement: {
    prototype: HTMLBeerDetailElement;
    new (): HTMLBeerDetailElement;
  };
  interface HTMLElementTagNameMap {
    'beer-detail': HTMLBeerDetailElement;
  }
  interface ElementTagNameMap {
    'beer-detail': HTMLBeerDetailElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'beer-detail': JSXElements.BeerDetailAttributes;
    }
  }
  namespace JSXElements {
    export interface BeerDetailAttributes extends HTMLAttributes {
      'beerId'?: string;
    }
  }
}


declare global {
  interface HTMLBeerItemElement extends HTMLStencilElement {
    'beer': Beer;
    'fave': Boolean;
  }
  var HTMLBeerItemElement: {
    prototype: HTMLBeerItemElement;
    new (): HTMLBeerItemElement;
  };
  interface HTMLElementTagNameMap {
    'beer-item': HTMLBeerItemElement;
  }
  interface ElementTagNameMap {
    'beer-item': HTMLBeerItemElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'beer-item': JSXElements.BeerItemAttributes;
    }
  }
  namespace JSXElements {
    export interface BeerItemAttributes extends HTMLAttributes {
      'beer'?: Beer;
      'fave'?: Boolean;
      'onBeerDeleted'?: (event: CustomEvent) => void;
    }
  }
}


declare global {
  interface HTMLBeerListElement extends HTMLStencilElement {
    'beers': Array<Beer>;
    'fave': Boolean;
  }
  var HTMLBeerListElement: {
    prototype: HTMLBeerListElement;
    new (): HTMLBeerListElement;
  };
  interface HTMLElementTagNameMap {
    'beer-list': HTMLBeerListElement;
  }
  interface ElementTagNameMap {
    'beer-list': HTMLBeerListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'beer-list': JSXElements.BeerListAttributes;
    }
  }
  namespace JSXElements {
    export interface BeerListAttributes extends HTMLAttributes {
      'beers'?: Array<Beer>;
      'fave'?: Boolean;
    }
  }
}


declare global {
  interface HTMLBeerPageElement extends HTMLStencilElement {
    'history': RouterHistory;
  }
  var HTMLBeerPageElement: {
    prototype: HTMLBeerPageElement;
    new (): HTMLBeerPageElement;
  };
  interface HTMLElementTagNameMap {
    'beer-page': HTMLBeerPageElement;
  }
  interface ElementTagNameMap {
    'beer-page': HTMLBeerPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'beer-page': JSXElements.BeerPageAttributes;
    }
  }
  namespace JSXElements {
    export interface BeerPageAttributes extends HTMLAttributes {
      'history'?: RouterHistory;
    }
  }
}


declare global {
  interface HTMLFavoritesPageElement extends HTMLStencilElement {

  }
  var HTMLFavoritesPageElement: {
    prototype: HTMLFavoritesPageElement;
    new (): HTMLFavoritesPageElement;
  };
  interface HTMLElementTagNameMap {
    'favorites-page': HTMLFavoritesPageElement;
  }
  interface ElementTagNameMap {
    'favorites-page': HTMLFavoritesPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'favorites-page': JSXElements.FavoritesPageAttributes;
    }
  }
  namespace JSXElements {
    export interface FavoritesPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLFeedListElement extends HTMLStencilElement {
    'posts': any;
  }
  var HTMLFeedListElement: {
    prototype: HTMLFeedListElement;
    new (): HTMLFeedListElement;
  };
  interface HTMLElementTagNameMap {
    'feed-list': HTMLFeedListElement;
  }
  interface ElementTagNameMap {
    'feed-list': HTMLFeedListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'feed-list': JSXElements.FeedListAttributes;
    }
  }
  namespace JSXElements {
    export interface FeedListAttributes extends HTMLAttributes {
      'posts'?: any;
    }
  }
}


declare global {
  interface HTMLFeedPageModalElement extends HTMLStencilElement {

  }
  var HTMLFeedPageModalElement: {
    prototype: HTMLFeedPageModalElement;
    new (): HTMLFeedPageModalElement;
  };
  interface HTMLElementTagNameMap {
    'feed-page-modal': HTMLFeedPageModalElement;
  }
  interface ElementTagNameMap {
    'feed-page-modal': HTMLFeedPageModalElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'feed-page-modal': JSXElements.FeedPageModalAttributes;
    }
  }
  namespace JSXElements {
    export interface FeedPageModalAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLFeedPageElement extends HTMLStencilElement {

  }
  var HTMLFeedPageElement: {
    prototype: HTMLFeedPageElement;
    new (): HTMLFeedPageElement;
  };
  interface HTMLElementTagNameMap {
    'feed-page': HTMLFeedPageElement;
  }
  interface ElementTagNameMap {
    'feed-page': HTMLFeedPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'feed-page': JSXElements.FeedPageAttributes;
    }
  }
  namespace JSXElements {
    export interface FeedPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLLazyImgElement extends HTMLStencilElement {
    'alt': string;
    'src': string;
  }
  var HTMLLazyImgElement: {
    prototype: HTMLLazyImgElement;
    new (): HTMLLazyImgElement;
  };
  interface HTMLElementTagNameMap {
    'lazy-img': HTMLLazyImgElement;
  }
  interface ElementTagNameMap {
    'lazy-img': HTMLLazyImgElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'lazy-img': JSXElements.LazyImgAttributes;
    }
  }
  namespace JSXElements {
    export interface LazyImgAttributes extends HTMLAttributes {
      'alt'?: string;
      'onLazyImgloaded'?: (event: CustomEvent<HTMLImageElement>) => void;
      'src'?: string;
    }
  }
}


declare global {
  interface HTMLMainPageElement extends HTMLStencilElement {

  }
  var HTMLMainPageElement: {
    prototype: HTMLMainPageElement;
    new (): HTMLMainPageElement;
  };
  interface HTMLElementTagNameMap {
    'main-page': HTMLMainPageElement;
  }
  interface ElementTagNameMap {
    'main-page': HTMLMainPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'main-page': JSXElements.MainPageAttributes;
    }
  }
  namespace JSXElements {
    export interface MainPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLPopoverPageElement extends HTMLStencilElement {

  }
  var HTMLPopoverPageElement: {
    prototype: HTMLPopoverPageElement;
    new (): HTMLPopoverPageElement;
  };
  interface HTMLElementTagNameMap {
    'popover-page': HTMLPopoverPageElement;
  }
  interface ElementTagNameMap {
    'popover-page': HTMLPopoverPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'popover-page': JSXElements.PopoverPageAttributes;
    }
  }
  namespace JSXElements {
    export interface PopoverPageAttributes extends HTMLAttributes {
      'onClosePopover'?: (event: CustomEvent) => void;
    }
  }
}


declare global {
  interface HTMLPostDetailElement extends HTMLStencilElement {
    'post': any;
  }
  var HTMLPostDetailElement: {
    prototype: HTMLPostDetailElement;
    new (): HTMLPostDetailElement;
  };
  interface HTMLElementTagNameMap {
    'post-detail': HTMLPostDetailElement;
  }
  interface ElementTagNameMap {
    'post-detail': HTMLPostDetailElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'post-detail': JSXElements.PostDetailAttributes;
    }
  }
  namespace JSXElements {
    export interface PostDetailAttributes extends HTMLAttributes {
      'post'?: any;
    }
  }
}


declare global {
  interface HTMLPostImgElement extends HTMLStencilElement {
    'alt': string;
    'src': string;
  }
  var HTMLPostImgElement: {
    prototype: HTMLPostImgElement;
    new (): HTMLPostImgElement;
  };
  interface HTMLElementTagNameMap {
    'post-img': HTMLPostImgElement;
  }
  interface ElementTagNameMap {
    'post-img': HTMLPostImgElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'post-img': JSXElements.PostImgAttributes;
    }
  }
  namespace JSXElements {
    export interface PostImgAttributes extends HTMLAttributes {
      'alt'?: string;
      'onLazyImgloaded'?: (event: CustomEvent<HTMLImageElement>) => void;
      'src'?: string;
    }
  }
}


declare global {
  interface HTMLPostItemElement extends HTMLStencilElement {
    'post': any;
  }
  var HTMLPostItemElement: {
    prototype: HTMLPostItemElement;
    new (): HTMLPostItemElement;
  };
  interface HTMLElementTagNameMap {
    'post-item': HTMLPostItemElement;
  }
  interface ElementTagNameMap {
    'post-item': HTMLPostItemElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'post-item': JSXElements.PostItemAttributes;
    }
  }
  namespace JSXElements {
    export interface PostItemAttributes extends HTMLAttributes {
      'post'?: any;
    }
  }
}


declare global {
  interface HTMLProfileHeaderElement extends HTMLStencilElement {

  }
  var HTMLProfileHeaderElement: {
    prototype: HTMLProfileHeaderElement;
    new (): HTMLProfileHeaderElement;
  };
  interface HTMLElementTagNameMap {
    'profile-header': HTMLProfileHeaderElement;
  }
  interface ElementTagNameMap {
    'profile-header': HTMLProfileHeaderElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'profile-header': JSXElements.ProfileHeaderAttributes;
    }
  }
  namespace JSXElements {
    export interface ProfileHeaderAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLProfilePageElement extends HTMLStencilElement {

  }
  var HTMLProfilePageElement: {
    prototype: HTMLProfilePageElement;
    new (): HTMLProfilePageElement;
  };
  interface HTMLElementTagNameMap {
    'profile-page': HTMLProfilePageElement;
  }
  interface ElementTagNameMap {
    'profile-page': HTMLProfilePageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'profile-page': JSXElements.ProfilePageAttributes;
    }
  }
  namespace JSXElements {
    export interface ProfilePageAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLSettingsPageElement extends HTMLStencilElement {

  }
  var HTMLSettingsPageElement: {
    prototype: HTMLSettingsPageElement;
    new (): HTMLSettingsPageElement;
  };
  interface HTMLElementTagNameMap {
    'settings-page': HTMLSettingsPageElement;
  }
  interface ElementTagNameMap {
    'settings-page': HTMLSettingsPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'settings-page': JSXElements.SettingsPageAttributes;
    }
  }
  namespace JSXElements {
    export interface SettingsPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLShareButtonElement extends HTMLStencilElement {
    'beer': any;
  }
  var HTMLShareButtonElement: {
    prototype: HTMLShareButtonElement;
    new (): HTMLShareButtonElement;
  };
  interface HTMLElementTagNameMap {
    'share-button': HTMLShareButtonElement;
  }
  interface ElementTagNameMap {
    'share-button': HTMLShareButtonElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'share-button': JSXElements.ShareButtonAttributes;
    }
  }
  namespace JSXElements {
    export interface ShareButtonAttributes extends HTMLAttributes {
      'beer'?: any;
    }
  }
}


declare global {
  interface HTMLStencilBeerElement extends HTMLStencilElement {

  }
  var HTMLStencilBeerElement: {
    prototype: HTMLStencilBeerElement;
    new (): HTMLStencilBeerElement;
  };
  interface HTMLElementTagNameMap {
    'stencil-beer': HTMLStencilBeerElement;
  }
  interface ElementTagNameMap {
    'stencil-beer': HTMLStencilBeerElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'stencil-beer': JSXElements.StencilBeerAttributes;
    }
  }
  namespace JSXElements {
    export interface StencilBeerAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLTabsPageElement extends HTMLStencilElement {

  }
  var HTMLTabsPageElement: {
    prototype: HTMLTabsPageElement;
    new (): HTMLTabsPageElement;
  };
  interface HTMLElementTagNameMap {
    'tabs-page': HTMLTabsPageElement;
  }
  interface ElementTagNameMap {
    'tabs-page': HTMLTabsPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'tabs-page': JSXElements.TabsPageAttributes;
    }
  }
  namespace JSXElements {
    export interface TabsPageAttributes extends HTMLAttributes {

    }
  }
}


declare global {
  interface HTMLUserProfileElement extends HTMLStencilElement {
    'userName': any;
  }
  var HTMLUserProfileElement: {
    prototype: HTMLUserProfileElement;
    new (): HTMLUserProfileElement;
  };
  interface HTMLElementTagNameMap {
    'user-profile': HTMLUserProfileElement;
  }
  interface ElementTagNameMap {
    'user-profile': HTMLUserProfileElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'user-profile': JSXElements.UserProfileAttributes;
    }
  }
  namespace JSXElements {
    export interface UserProfileAttributes extends HTMLAttributes {
      'userName'?: any;
    }
  }
}


declare global {
  interface HTMLUsersListElement extends HTMLStencilElement {
    'users': any[];
  }
  var HTMLUsersListElement: {
    prototype: HTMLUsersListElement;
    new (): HTMLUsersListElement;
  };
  interface HTMLElementTagNameMap {
    'users-list': HTMLUsersListElement;
  }
  interface ElementTagNameMap {
    'users-list': HTMLUsersListElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'users-list': JSXElements.UsersListAttributes;
    }
  }
  namespace JSXElements {
    export interface UsersListAttributes extends HTMLAttributes {
      'users'?: any[];
    }
  }
}


declare global {
  interface HTMLUsersPageElement extends HTMLStencilElement {

  }
  var HTMLUsersPageElement: {
    prototype: HTMLUsersPageElement;
    new (): HTMLUsersPageElement;
  };
  interface HTMLElementTagNameMap {
    'users-page': HTMLUsersPageElement;
  }
  interface ElementTagNameMap {
    'users-page': HTMLUsersPageElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      'users-page': JSXElements.UsersPageAttributes;
    }
  }
  namespace JSXElements {
    export interface UsersPageAttributes extends HTMLAttributes {

    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
